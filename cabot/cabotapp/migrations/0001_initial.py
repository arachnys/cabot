# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-12 10:31
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertAcknowledgement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('cancelled_time', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AlertPlugin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(editable=False, max_length=30, unique=True)),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlertPluginUserData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(editable=False, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('alerts_enabled', models.BooleanField(default=True, help_text=b'Alert when this service is not healthy.')),
                ('last_alert_sent', models.DateTimeField(blank=True, null=True)),
                ('overall_status', models.TextField(default=b'PASSING')),
                ('old_overall_status', models.TextField(default=b'PASSING')),
                ('hackpad_id', models.TextField(blank=True, help_text=b'Gist, Hackpad or Refheap js embed with recovery instructions e.g. https://you.hackpad.com/some_document.js', null=True, verbose_name=b'Recovery instructions')),
                ('address', models.TextField(blank=True, help_text=b'Address (IP/Hostname) of service.')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InstanceStatusSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_index=True)),
                ('num_checks_active', models.IntegerField(default=0)),
                ('num_checks_passing', models.IntegerField(default=0)),
                ('num_checks_failing', models.IntegerField(default=0)),
                ('overall_status', models.TextField(default=b'PASSING')),
                ('did_send_alert', models.IntegerField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('alerts_enabled', models.BooleanField(default=True, help_text=b'Alert when this service is not healthy.')),
                ('last_alert_sent', models.DateTimeField(blank=True, null=True)),
                ('overall_status', models.TextField(default=b'PASSING')),
                ('old_overall_status', models.TextField(default=b'PASSING')),
                ('hackpad_id', models.TextField(blank=True, help_text=b'Gist, Hackpad or Refheap js embed with recovery instructions e.g. https://you.hackpad.com/some_document.js', null=True, verbose_name=b'Recovery instructions')),
                ('url', models.TextField(blank=True, help_text=b'URL of service.')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceStatusSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_index=True)),
                ('num_checks_active', models.IntegerField(default=0)),
                ('num_checks_passing', models.IntegerField(default=0)),
                ('num_checks_failing', models.IntegerField(default=0)),
                ('overall_status', models.TextField(default=b'PASSING')),
                ('did_send_alert', models.IntegerField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('uid', models.TextField()),
                ('deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StatusCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('active', models.BooleanField(default=True, help_text=b'If not active, check will not be used to calculate service status and will not trigger alerts.')),
                ('importance', models.CharField(choices=[(b'WARNING', b'Warning'), (b'ERROR', b'Error'), (b'CRITICAL', b'Critical')], default=b'ERROR', help_text=b'Severity level of a failure. Critical alerts are for failures you want to wake you up at 2am, Errors are things you can sleep through but need to fix in the morning, and warnings for less important things.', max_length=30)),
                ('frequency', models.IntegerField(default=5, help_text=b'Minutes between each check.')),
                ('debounce', models.IntegerField(default=0, help_text=b'Number of successive failures permitted before check will be marked as failed. Default is 0, i.e. fail on first failure.', null=True)),
                ('calculated_status', models.CharField(blank=True, choices=[(b'passing', b'passing'), (b'intermittent', b'intermittent'), (b'failing', b'failing')], default=b'passing', max_length=50)),
                ('last_run', models.DateTimeField(null=True)),
                ('cached_health', models.TextField(editable=False, null=True)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StatusCheckResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_index=True)),
                ('time_complete', models.DateTimeField(db_index=True, null=True)),
                ('raw_data', models.TextField(null=True)),
                ('succeeded', models.BooleanField(default=False)),
                ('error', models.TextField(null=True)),
                ('job_number', models.PositiveIntegerField(null=True)),
                ('status_check', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cabotapp.StatusCheck')),
            ],
            options={
                'ordering': ['-time_complete'],
            },
        ),
        migrations.CreateModel(
            name='StatusCheckVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=128)),
                ('value', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('status_check', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cabotapp.StatusCheck')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_number', models.CharField(blank=True, default=b'', max_length=20)),
                ('hipchat_alias', models.CharField(blank=True, default=b'', max_length=50)),
                ('fallback_alert_user', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
